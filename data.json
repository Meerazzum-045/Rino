{"v":"5.8.1","fr":30,"ip":0,"op":300,"w":1920,"h":1080,"nm":"Box_Main","ddd":0,"assets":[],"fonts":{"list":[{"origin":0,"fPath":"","fClass":"","fFamily":"Times New Roman","fWeight":"","fStyle":"Regular","fName":"TimesNewRomanPSMT","ascent":69.4992065429688}]},"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"#ox","ln":"ox","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[924,548,0],"ix":2,"l":2},"a":{"a":0,"k":[-36,8,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Extrudalizer","np":70,"mn":"Pseudo/Extrudalizer","ix":1,"en":1,"ef":[{"ty":6,"nm":"3D Transform","mn":"Pseudo/Extrudalizer-0001","ix":1,"v":0},{"ty":0,"nm":"Extrusion depth","mn":"Pseudo/Extrudalizer-0002","ix":2,"v":{"a":0,"k":400,"ix":2}},{"ty":3,"nm":"Position","mn":"Pseudo/Extrudalizer-0003","ix":3,"v":{"a":0,"k":[0,0,0],"ix":3}},{"ty":6,"nm":"Scale","mn":"Pseudo/Extrudalizer-0004","ix":4,"v":0},{"ty":0,"nm":"Front scale","mn":"Pseudo/Extrudalizer-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Back scale","mn":"Pseudo/Extrudalizer-0006","ix":6,"v":{"a":0,"k":100,"ix":6}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0007","ix":7,"v":0},{"ty":6,"nm":"Pitch/Roll/Yaw","mn":"Pseudo/Extrudalizer-0008","ix":8,"v":0},{"ty":0,"nm":"Pitch (x)","mn":"Pseudo/Extrudalizer-0009","ix":9,"v":{"a":0,"k":0,"ix":9}},{"ty":0,"nm":"Yaw (y)","mn":"Pseudo/Extrudalizer-0010","ix":10,"v":{"a":0,"k":0,"ix":10}},{"ty":0,"nm":"Roll (z)","mn":"Pseudo/Extrudalizer-0011","ix":11,"v":{"a":0,"k":0,"ix":11}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0012","ix":12,"v":0},{"ty":6,"nm":"Orbit control","mn":"Pseudo/Extrudalizer-0013","ix":13,"v":0},{"ty":0,"nm":"X Rotation","mn":"Pseudo/Extrudalizer-0014","ix":14,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[30]},{"t":299,"s":[390]}],"ix":14}},{"ty":0,"nm":"Y Rotation","mn":"Pseudo/Extrudalizer-0015","ix":15,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[43]},{"t":299,"s":[403]}],"ix":15}},{"ty":0,"nm":"Z Rotation","mn":"Pseudo/Extrudalizer-0016","ix":16,"v":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":0,"s":[0]},{"t":299,"s":[-360]}],"ix":16}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0017","ix":17,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0018","ix":18,"v":0},{"ty":6,"nm":"Appearance","mn":"Pseudo/Extrudalizer-0019","ix":19,"v":0},{"ty":7,"nm":"Hide anchor point","mn":"Pseudo/Extrudalizer-0020","ix":20,"v":{"a":0,"k":1,"ix":20}},{"ty":7,"nm":"Wireframe mode","mn":"Pseudo/Extrudalizer-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":2,"nm":"Edge stroke color","mn":"Pseudo/Extrudalizer-0022","ix":22,"v":{"a":0,"k":[0,1,0.98431372549,1],"ix":22}},{"ty":0,"nm":"Edge stroke width","mn":"Pseudo/Extrudalizer-0023","ix":23,"v":{"a":0,"k":3,"ix":23}},{"ty":0,"nm":"Translucency","mn":"Pseudo/Extrudalizer-0024","ix":24,"v":{"a":0,"k":0,"ix":24}},{"ty":6,"nm":"Front & Back ","mn":"Pseudo/Extrudalizer-0025","ix":25,"v":0},{"ty":2,"nm":"Front color","mn":"Pseudo/Extrudalizer-0026","ix":26,"v":{"a":0,"k":[0,0.39999973774,1,1],"ix":26}},{"ty":0,"nm":"Front opacity","mn":"Pseudo/Extrudalizer-0027","ix":27,"v":{"a":0,"k":100,"ix":27}},{"ty":0,"nm":"Front gradient opacity","mn":"Pseudo/Extrudalizer-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Front gradient direction","mn":"Pseudo/Extrudalizer-0029","ix":29,"v":{"a":0,"k":0,"ix":29}},{"ty":6,"nm":"   ","mn":"Pseudo/Extrudalizer-0030","ix":30,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0031","ix":31,"v":0},{"ty":2,"nm":"Back color","mn":"Pseudo/Extrudalizer-0032","ix":32,"v":{"a":0,"k":[0,0.39999973774,1,1],"ix":32}},{"ty":0,"nm":"Back opacity","mn":"Pseudo/Extrudalizer-0033","ix":33,"v":{"a":0,"k":100,"ix":33}},{"ty":0,"nm":"Back gradient opacity","mn":"Pseudo/Extrudalizer-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":0,"nm":"Back gradient direction","mn":"Pseudo/Extrudalizer-0035","ix":35,"v":{"a":0,"k":0,"ix":35}},{"ty":6,"nm":"    ","mn":"Pseudo/Extrudalizer-0036","ix":36,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0037","ix":37,"v":0},{"ty":3,"nm":"Gradient start point","mn":"Pseudo/Extrudalizer-0038","ix":38,"v":{"a":0,"k":[0,0],"ix":38}},{"ty":3,"nm":"Gradient end point","mn":"Pseudo/Extrudalizer-0039","ix":39,"v":{"a":0,"k":[0,0],"ix":39}},{"ty":6,"nm":"Edit gradient start/end points ","mn":"Pseudo/Extrudalizer-0040","ix":40,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0041","ix":41,"v":0},{"ty":6,"nm":"at 3D rotation set to [0,0,0]","mn":"Pseudo/Extrudalizer-0042","ix":42,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0043","ix":43,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0044","ix":44,"v":0},{"ty":6,"nm":"Sides","mn":"Pseudo/Extrudalizer-0045","ix":45,"v":0},{"ty":2,"nm":"Sides color","mn":"Pseudo/Extrudalizer-0046","ix":46,"v":{"a":0,"k":[0.346077620983,0.835294127464,0.281707018614,1],"ix":46}},{"ty":0,"nm":"Sides opacity","mn":"Pseudo/Extrudalizer-0047","ix":47,"v":{"a":0,"k":100,"ix":47}},{"ty":0,"nm":"Sides gradient opacity","mn":"Pseudo/Extrudalizer-0048","ix":48,"v":{"a":0,"k":0,"ix":48}},{"ty":0,"nm":"Sides gradient direction","mn":"Pseudo/Extrudalizer-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":0,"nm":"Sides gradient length","mn":"Pseudo/Extrudalizer-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":2,"nm":"Sides fill shadow color","mn":"Pseudo/Extrudalizer-0051","ix":51,"v":{"a":0,"k":[1,0.168627440929,0.168627440929,1],"ix":51}},{"ty":7,"nm":"Sides fill shadow opacity","mn":"Pseudo/Extrudalizer-0052","ix":52,"v":{"a":0,"k":100,"ix":52}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0053","ix":53,"v":0},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0054","ix":54,"v":0},{"ty":6,"nm":"Parenting Data","mn":"Pseudo/Extrudalizer-0055","ix":55,"v":0},{"ty":0,"nm":"Front opacity readout","mn":"Pseudo/Extrudalizer-0056","ix":56,"v":{"a":0,"k":100,"ix":56,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":0,"nm":"Back opacity readout","mn":"Pseudo/Extrudalizer-0057","ix":57,"v":{"a":0,"k":100,"ix":57,"x":"var $bm_rt;\ntry {\n    $bm_rt = content('--- EXTRUDALIZER ---').content('BACK').transform.opacity;\n} catch (e) {\n    $bm_rt = 0;\n}"}},{"ty":7,"nm":"Compute 3D front bounding box","mn":"Pseudo/Extrudalizer-0058","ix":58,"v":{"a":0,"k":0,"ix":58}},{"ty":3,"nm":"Front upper left","mn":"Pseudo/Extrudalizer-0059","ix":59,"v":{"a":0,"k":[0,0],"ix":59,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[0],\n        front_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Front upper right","mn":"Pseudo/Extrudalizer-0060","ix":60,"v":{"a":0,"k":[0,0],"ix":60,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[2],\n        front_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Front lower left","mn":"Pseudo/Extrudalizer-0061","ix":61,"v":{"a":0,"k":[0,0],"ix":61,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[4],\n        front_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Front lower right","mn":"Pseudo/Extrudalizer-0062","ix":62,"v":{"a":0,"k":[0,0],"ix":62,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D front bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const front_bb = extr_data_arr[11].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        front_bb[6],\n        front_bb[7]\n    ];\n}"}},{"ty":7,"nm":"Compute 3D back bounding box","mn":"Pseudo/Extrudalizer-0063","ix":63,"v":{"a":0,"k":0,"ix":63}},{"ty":3,"nm":"Back upper left","mn":"Pseudo/Extrudalizer-0064","ix":64,"v":{"a":0,"k":[0,0],"ix":64,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[0],\n        back_bb[1]\n    ];\n}"}},{"ty":3,"nm":"Back upper right","mn":"Pseudo/Extrudalizer-0065","ix":65,"v":{"a":0,"k":[0,0],"ix":65,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[2],\n        back_bb[3]\n    ];\n}"}},{"ty":3,"nm":"Back lower left","mn":"Pseudo/Extrudalizer-0066","ix":66,"v":{"a":0,"k":[0,0],"ix":66,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[4],\n        back_bb[5]\n    ];\n}"}},{"ty":3,"nm":"Back lower right","mn":"Pseudo/Extrudalizer-0067","ix":67,"v":{"a":0,"k":[0,0],"ix":67,"x":"var $bm_rt;\nconst use_bb = effect('Extrudalizer')('Compute 3D back bounding box').value;\nif (!use_bb) {\n    $bm_rt = [\n        0,\n        0\n    ];\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const back_bb = extr_data_arr[12].split(',').map(s => parseFloat(s));\n    $bm_rt = [\n        back_bb[6],\n        back_bb[7]\n    ];\n}"}},{"ty":6,"nm":"Extrudalizer","mn":"Pseudo/Extrudalizer-0068","ix":68,"v":0}]},{"ty":5,"nm":"FACE 0","np":3,"mn":"ADBE Color Control","ix":2,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0,0.39999973774,1,1],"ix":1}}]},{"ty":5,"nm":"FACE 1","np":3,"mn":"ADBE Color Control","ix":3,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.159369468689,0.473660945892,0.945098042488,1],"ix":1}}]},{"ty":5,"nm":"FACE 2","np":3,"mn":"ADBE Color Control","ix":4,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.007135716733,0.368203043938,0.909803926945,1],"ix":1}}]},{"ty":5,"nm":"FACE 3","np":3,"mn":"ADBE Color Control","ix":5,"en":1,"ef":[{"ty":2,"nm":"Color","mn":"ADBE Color Control-0001","ix":1,"v":{"a":0,"k":[0.159369468689,0.473660945892,0.945098042488,1],"ix":1}}]}],"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0],[0,0]],"v":[[190,-190],[190,190],[-190,190],[-190,-190]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":true},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":20,"ix":5},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":true},{"ty":"fl","c":{"a":0,"k":[0.619607962814,0.141176006841,0.196077997544,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[-36,8],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ORIGIN SHAPE","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"d":1,"ty":"el","s":{"a":0,"k":[10,10],"ix":2},"p":{"a":0,"k":[0,0],"ix":3},"nm":"Ellipse Path 1","mn":"ADBE Vector Shape - Ellipse","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isHidden = effect('Extrudalizer')('Hide anchor point').value;\n$bm_rt = $bm_mul(!isHidden, 100);"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"ANCHOR POINT","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[5].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Front color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Front opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst is_facing_towards_us = extr_data.split(';')[8] === 'true';\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = $bm_div(effect('Extrudalizer')('Translucency').value, 2);\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    if (is_facing_towards_us > 0) {\n        $bm_rt = opacity_value;\n    } else {\n        $bm_rt = transparency_value;\n    }\n    ;\n}\n;"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"FRONT","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst depth = effect('Extrudalizer')('Extrusion depth').value;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nconst points_arr = extr_data_arr[6].split(',').map(s => parseFloat(s));\nlet points_3D = [];\nfor (var i = 0, il = points_arr.length / 3; i < il; i++) {\n    points_3D.push(points_arr.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\n;\nconst points_2D = points_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst num_pts = points_2D.length;\nconst isPathClosed = extr_data_arr[4] === 'true';\nconst zeroArr = Array(num_pts).fill([\n    0,\n    0\n]);\n$bm_rt = createPath(points_2D, zeroArr, zeroArr, isPathClosed);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Back color').value;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Back opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nif (isWireframe) {\n    $bm_rt = value = 0;\n} else {\n    try {\n        const frontOpacity = content('--- EXTRUDALIZER ---').content('FRONT').transform.opacity.value;\n        $bm_rt = value = $bm_sub(100, frontOpacity);\n    } catch (e) {\n        $bm_rt = 100;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"BACK","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 0;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 0;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 0;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 0 - 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 1;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 1;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 1;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 1 - 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 2;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 2;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 2;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 2 - 3","np":3,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nconst side_index = 3;\nconst extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\nconst extr_data_arr = extr_data.split(';');\nlet sorted_indices = extr_data_arr[7];\nsorted_indices = sorted_indices.split(',').map(p => parseInt(p));\nlet srt_ind = [];\nfor (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n    srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n}\nconst currentIndex = srt_ind[side_index][0];\nconst nextIndex = srt_ind[side_index][1];\nlet points_back_3D = [], points_front_3D = [];\nconst front_points_3D = extr_data_arr[5].split(',').map(s => parseFloat(s));\nconst back_points_3D = extr_data_arr[6].split(',').map(s => parseFloat(s));\nfor (var i = 0, il = front_points_3D.length / 3; i < il; i++) {\n    points_back_3D.push(back_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n    points_front_3D.push(front_points_3D.slice($bm_mul(3, i), $bm_sum($bm_mul(3, i), 3)));\n}\nconst points_front_2D = points_front_3D.map(v => [\n    v[0],\n    v[1]\n]);\nconst points_back_2D = points_back_3D.map(v => [\n    v[0],\n    v[1]\n]);\n$bm_rt = createPath([\n    points_front_2D[nextIndex],\n    points_front_2D[currentIndex],\n    points_back_2D[currentIndex],\n    points_back_2D[nextIndex]\n]);"},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke color').value;"},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\n$bm_rt = effect('Extrudalizer')('Edge stroke width').value;"},"lc":1,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nlet color = effect('Extrudalizer')('Sides color').value;\ntry {\n    const side_index = 3;\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    let sorted_indices = extr_data_arr[7];\n    sorted_indices = sorted_indices.split(',').map(p => parseInt(p));\n    let srt_ind = [];\n    for (var i = 0, il = sorted_indices.length / 2; i < il; i++) {\n        srt_ind.push(sorted_indices.slice($bm_mul(2, i), $bm_sum($bm_mul(2, i), 2)));\n    }\n    const currentIndex = srt_ind[side_index][0];\n    color = effect('FACE ' + currentIndex)('ADBE Color Control-0001').value;\n} catch (e) {\n}\n$bm_rt = color;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst opacity = effect('Extrudalizer')('Sides opacity').value;\n$bm_rt = $bm_mul(!isWireframe, opacity);"},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7,"x":"var $bm_rt;\nconst isWireframe = effect('Extrudalizer')('Wireframe mode').value;\nconst transparency_value = effect('Extrudalizer')('Translucency').value;\nconst opacity_value = $bm_sub(100, transparency_value);\nif (isWireframe) {\n    $bm_rt = value = 100;\n} else {\n    const extr_data = thisComp.layer('EXTRUDALIZER DATA Box').text.sourceText;\n    const extr_data_arr = extr_data.split(';');\n    const isPathClosed = extr_data_arr[4] === 'true';\n    if (!isPathClosed) {\n        $bm_rt = value = opacity_value;\n    } else {\n        const side_index = 3;\n        const num_facing_sides = extr_data_arr[9];\n        $bm_rt = value = side_index <= $bm_sub(num_facing_sides, 1) ? opacity_value : transparency_value;\n    }\n}"},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDE 3 - 0","np":3,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"SIDES","np":4,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"--- EXTRUDALIZER ---","np":4,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":300,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":5,"nm":"EXTRUDALIZER DATA Box","hd":true,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[960,540,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"t":{"d":{"k":[{"s":{"s":36,"f":"TimesNewRomanPSMT","t":"","ca":0,"j":0,"tr":0,"lh":43.2000007629395,"ls":0,"fc":[0.922,0.922,0.922]},"t":0}],"x":"var $bm_rt;\nvar dot_, cross_vec, len_vec, arraysEqual, getNormal, get2D_projection, getBoundingBox, getPositionMatrix, getRotationMatrix, getScaleMatrix, getIdentity, translate, rotateX, rotateY, rotateZ, multiplyMatrixVector, multiplyMatrices, multiplyArrayOfMatrices, transformMatrix, make_transform, getPoint, getArea, isClockwise, getCenter, hasNoneZeroValues, angle_between, angle_between_cw, isStraightLine_w_delta, isFacingTowardsUs, multiplyMatrixVector3x3, multiplyArrayOfMatrices3x3, multiplyMatrices3x3, transform2D_apply, get_transform_shape_matrix, compare_sides, stringify;\ndot_ = function (a, b) {\n    if (a.length == 2) {\n        return $bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1]));\n    } else {\n        return $bm_sum($bm_sum($bm_mul(a[0], b[0]), $bm_mul(a[1], b[1])), $bm_mul(a[2], b[2]));\n    }\n};\ncross_vec = function (a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n};\nlen_vec = function (a) {\n    return Math.sqrt(dot_(a, a));\n};\narraysEqual = function (arr1, arr2) {\n    for (var i = 0, il = arr1.length; i < il; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\ngetNormal = function (pts) {\n    const dir = cross_vec(sub(pts[1], pts[0]), sub(pts[2], pts[0]));\n    return dir;\n};\nget2D_projection = function (points) {\n    return points.map(v => [\n        v[0],\n        v[1]\n    ]);\n};\ngetBoundingBox = function (points) {\n    const boundingBox = {\n        left: Number.POSITIVE_INFINITY,\n        top: Number.POSITIVE_INFINITY,\n        right: Number.NEGATIVE_INFINITY,\n        bottom: Number.NEGATIVE_INFINITY,\n        width: undefined,\n        height: undefined,\n        center: undefined\n    };\n    points.forEach(point => {\n        boundingBox.left = Math.min(boundingBox.left, point[0]);\n        boundingBox.top = Math.min(boundingBox.top, point[1]);\n        boundingBox.right = Math.max(boundingBox.right, point[0]);\n        boundingBox.bottom = Math.max(boundingBox.bottom, point[1]);\n    });\n    boundingBox.width = $bm_sub(boundingBox.right, boundingBox.left);\n    boundingBox.height = $bm_sub(boundingBox.bottom, boundingBox.top);\n    boundingBox.center = [\n        $bm_sum(boundingBox.left, $bm_div(boundingBox.width, 2)),\n        $bm_sum(boundingBox.top, $bm_div(boundingBox.height, 2))\n    ];\n    boundingBox.left_top = [\n        boundingBox.left,\n        boundingBox.top\n    ];\n    boundingBox.left_bottom = [\n        boundingBox.left,\n        boundingBox.bottom\n    ];\n    boundingBox.right_top = [\n        boundingBox.right,\n        boundingBox.top\n    ];\n    boundingBox.right_bottom = [\n        boundingBox.right,\n        boundingBox.bottom\n    ];\n    return boundingBox;\n};\ngetPositionMatrix = function (value) {\n    return translate(getIdentity(), value[0], value[1], $bm_neg(value[2]));\n};\ngetRotationMatrix = function (angles) {\n    const angleX = angles[0];\n    const angleY = angles[1];\n    const angleZ = angles[2];\n    var matrix = getIdentity();\n    matrix = rotateZ(matrix, $bm_div($bm_mul(angleZ, Math.PI), 180));\n    matrix = rotateY(matrix, $bm_div($bm_mul(angleY, Math.PI), 180));\n    matrix = rotateX(matrix, $bm_div($bm_mul(angleX, Math.PI), 180));\n    return matrix;\n};\ngetScaleMatrix = function (sc) {\n    return [\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        sc,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ngetIdentity = function () {\n    return [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n};\ntranslate = function (matrix, x, y, z) {\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        x,\n        0,\n        1,\n        0,\n        y,\n        0,\n        0,\n        1,\n        z,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateX = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        1,\n        0,\n        0,\n        0,\n        0,\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateY = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        0,\n        sin_th,\n        0,\n        0,\n        1,\n        0,\n        0,\n        $bm_neg(sin_th),\n        0,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nrotateZ = function (matrix, theta) {\n    const cos_th = Math.cos(theta), sin_th = Math.sin(theta);\n    return multiplyMatrices(matrix, [\n        cos_th,\n        $bm_neg(sin_th),\n        0,\n        0,\n        sin_th,\n        cos_th,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ]);\n};\nmultiplyMatrixVector = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 4; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 4; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 4), j)], vector[j]));\n        }\n    }\n    return result;\n};\nmultiplyMatrices = function (matrixB, matrixA) {\n    let result = new Array(16).fill(0);\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            for (let k = 0; k < 4; k++) {\n                result[$bm_sum($bm_mul(i, 4), j)] = $bm_sum(result[$bm_sum($bm_mul(i, 4), j)], $bm_mul(matrixA[$bm_sum($bm_mul(i, 4), k)], matrixB[$bm_sum($bm_mul(k, 4), j)]));\n            }\n        }\n    }\n    return result;\n};\nmultiplyArrayOfMatrices = function (matrices) {\n    var result = matrices[0];\n    for (var i = 1, il = matrices.length; i < il; i++) {\n        result = multiplyMatrices(result, matrices[i]);\n    }\n    return result;\n};\ntransformMatrix = function (move, sc, pivot, pitch_angles, anch, orbit_angles) {\n    var mat_array = [];\n    if (sc !== 1) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getScaleMatrix(sc),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getScaleMatrix(sc));\n        }\n    }\n    mat_array.push(getPositionMatrix(move));\n    if (!arraysEqual(pitch_angles, [\n            0,\n            0,\n            0\n        ])) {\n        if (!arraysEqual(pivot, [\n                0,\n                0,\n                0\n            ])) {\n            mat_array = mat_array.concat([\n                getPositionMatrix(pivot.map(i => -i)),\n                getRotationMatrix(pitch_angles),\n                getPositionMatrix(pivot)\n            ]);\n        } else {\n            mat_array.push(getRotationMatrix(pitch_angles));\n        }\n    }\n    if (!arraysEqual(anch, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getPositionMatrix(anch.map(i => -i)));\n    }\n    if (!arraysEqual(orbit_angles, [\n            0,\n            0,\n            0\n        ])) {\n        mat_array.push(getRotationMatrix(orbit_angles));\n    }\n    return multiplyArrayOfMatrices(mat_array);\n};\nmake_transform = function (transform_matrix, vector) {\n    if (vector.length == 2) {\n        vector = [\n            ...vector,\n            0,\n            1\n        ];\n    } else if (vector.length == 3) {\n        vector = [\n            ...vector,\n            1\n        ];\n    }\n    var result_vector_4d = multiplyMatrixVector(transform_matrix, vector);\n    return result_vector_4d.slice(0, 3);\n};\ngetPoint = function (p1, cp1, cp2, p2, t) {\n    const x = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[0]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[0])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[0])), $bm_mul(Math.pow(t, 3), p2[0]));\n    const y = $bm_sum($bm_sum($bm_sum($bm_mul(Math.pow($bm_sub(1, t), 3), p1[1]), $bm_mul($bm_mul($bm_mul(3, Math.pow($bm_sub(1, t), 2)), t), cp1[1])), $bm_mul($bm_mul($bm_mul(3, $bm_sub(1, t)), Math.pow(t, 2)), cp2[1])), $bm_mul(Math.pow(t, 3), p2[1]));\n    return [\n        x,\n        y\n    ];\n};\ngetArea = function (points) {\n    var area = 0;\n    for (var i = 0, il = points.length; i < il; i++) {\n        var p1 = points[i];\n        var p2 = points[(i + 1) % il];\n        area = $bm_sum(area, $bm_sub($bm_mul(p1[0], p2[1]), $bm_mul(p2[0], p1[1])));\n    }\n    return $bm_div(area, 2);\n};\nisClockwise = function (points) {\n    return getArea(points) > 0;\n};\ngetCenter = function (pts) {\n    var cp = [\n        0,\n        0\n    ];\n    const num_pts = pts.length;\n    for (var i = 0; i < num_pts; i++) {\n        cp = add(cp, pts[i]);\n    }\n    cp = div(cp, num_pts);\n    return cp;\n};\nhasNoneZeroValues = function (array2D) {\n    return array2D.some(array => array.some(value => value !== 0));\n};\nangle_between = function (a, b) {\n    const dot_prod = dot_(a, b);\n    const mag_a = len_vec(a);\n    const mag_b = len_vec(b);\n    const cos_ = $bm_div(dot_prod, $bm_mul(mag_a, mag_b));\n    return cos_;\n};\nangle_between_cw = function (u, v) {\n    const dotProduct = $bm_sum($bm_mul(u[0], v[0]), $bm_mul(u[1], v[1]));\n    const crossProduct = $bm_sub($bm_mul(u[0], v[1]), $bm_mul(u[1], v[0]));\n    let angle = Math.atan2(crossProduct, dotProduct);\n    angle = angle >= 0 ? angle : $bm_sum($bm_mul(2, Math.PI), angle);\n    const degrees = $bm_mul(angle, $bm_div(180, Math.PI));\n    return degrees;\n};\nisStraightLine_w_delta = function (cp1, cp2, delta) {\n    return angle_between(cp1, cp2) <= -delta;\n};\nisFacingTowardsUs = function (p1, p2) {\n    return dot_(sub(p2, p1), [\n        0,\n        0,\n        1\n    ]) > 0;\n};\nmultiplyMatrixVector3x3 = function (matrix, vector) {\n    var result = [\n        0,\n        0,\n        0,\n        0\n    ];\n    for (var i = 0; i < 3; i++) {\n        result[i] = 0;\n        for (var j = 0; j < 3; j++) {\n            result[i] = $bm_sum(result[i], $bm_mul(matrix[$bm_sum($bm_mul(i, 3), j)], vector[j]));\n        }\n    }\n    return result.slice(0, 2);\n};\nmultiplyArrayOfMatrices3x3 = function (matrices) {\n    if (matrices.length > 0) {\n        var result = matrices[0];\n        for (var i = 1, il = matrices.length; i < il; i++) {\n            result = multiplyMatrices3x3(result, matrices[i]);\n        }\n        return result;\n    } else {\n        return false;\n    }\n    ;\n};\nmultiplyMatrices3x3 = function (B, A) {\n    let C = new Array(9).fill(0);\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let k = 0; k < 3; k++) {\n                C[$bm_sum($bm_mul(i, 3), j)] = $bm_sum(C[$bm_sum($bm_mul(i, 3), j)], $bm_mul(A[$bm_sum($bm_mul(i, 3), k)], B[$bm_sum($bm_mul(k, 3), j)]));\n            }\n        }\n    }\n    return C;\n};\ntransform2D_apply = function (mt, p) {\n    if (mt == false) {\n        return p;\n    }\n    if (p.length == 2) {\n        p = [\n            ...p,\n            1\n        ];\n    }\n    return multiplyMatrixVector3x3(mt, p).slice(0, 2);\n};\nget_transform_shape_matrix = function (anchor, pos, scale, rot, skew, skew_axis) {\n    let mat_array = [];\n    if (!arraysEqual(anchor, [\n            0,\n            0\n        ])) {\n        const A = [\n            1,\n            0,\n            -anchor[0],\n            0,\n            1,\n            -anchor[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(A);\n    }\n    ;\n    if (!arraysEqual(scale, [\n            100,\n            100\n        ])) {\n        const S = [\n            $bm_transform.scale[0] / 100,\n            0,\n            0,\n            0,\n            $bm_transform.scale[1] / 100,\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(S);\n    }\n    ;\n    if (skew !== 0) {\n        const sk_angle = $bm_div($bm_mul(skew, Math.PI), 180);\n        const Sk = [\n            1,\n            Math.tan(-sk_angle),\n            0,\n            0,\n            1,\n            0,\n            0,\n            0,\n            1\n        ];\n        if (skew_axis !== 0) {\n            const sk_axis_angle = $bm_div($bm_mul(skew_axis, Math.PI), 180);\n            const Rz = [\n                Math.cos(sk_axis_angle),\n                -Math.sin(sk_axis_angle),\n                0,\n                Math.sin(sk_axis_angle),\n                Math.cos(sk_axis_angle),\n                0,\n                0,\n                0,\n                1\n            ];\n            const Rz_inv = [\n                Math.cos(-sk_axis_angle),\n                -Math.sin(-sk_axis_angle),\n                0,\n                Math.sin(-sk_axis_angle),\n                Math.cos(-sk_axis_angle),\n                0,\n                0,\n                0,\n                1\n            ];\n            const SkM = multiplyArrayOfMatrices3x3([\n                Rz_inv,\n                Sk,\n                Rz\n            ]);\n            mat_array.push(SkM);\n        } else {\n            mat_array.push(Sk);\n        }\n        ;\n    }\n    ;\n    if (rot !== 0) {\n        const theta = $bm_div($bm_mul(rot, Math.PI), 180);\n        const R = [\n            Math.cos(theta),\n            -Math.sin(theta),\n            0,\n            Math.sin(theta),\n            Math.cos(theta),\n            0,\n            0,\n            0,\n            1\n        ];\n        mat_array.push(R);\n    }\n    ;\n    if (!arraysEqual(pos, [\n            0,\n            0\n        ])) {\n        const T = [\n            1,\n            0,\n            pos[0],\n            0,\n            1,\n            pos[1],\n            0,\n            0,\n            1\n        ];\n        mat_array.push(T);\n    }\n    ;\n    return multiplyArrayOfMatrices3x3(mat_array);\n};\nconst shape_layer = thisComp.layer('#ox');\nconst shape = shape_layer(2)(1);\nconst shape_contents = shape(2);\nconst targetPath = shape_contents(1)(2);\nconst is_path_closed = targetPath.isClosed();\nconst extrudalizer = shape_layer('ADBE Effect Parade')('Pseudo/Extrudalizer');\nconst depth = extrudalizer('Extrusion depth').value;\nlet anchor = extrudalizer('Position').value;\nanchor = [\n    $bm_neg(anchor[0]),\n    anchor[1],\n    anchor[2]\n];\nconst angleX = extrudalizer('X Rotation').value;\nconst angleY = extrudalizer('Y Rotation').value;\nconst angleZ = extrudalizer('Z Rotation').value;\nconst pivot_angleX = extrudalizer('Pitch (x)').value;\nconst pivot_angleY = extrudalizer('Yaw (y)').value;\nconst pivot_angleZ = extrudalizer('Roll (z)').value;\nconst scale_front = $bm_div(extrudalizer('Front scale').value, 100);\nconst scale_back = $bm_div(extrudalizer('Back scale').value, 100);\nconst use_bb_front = extrudalizer('Compute 3D front bounding box').value;\nconst use_bb_back = extrudalizer('Compute 3D back bounding box').value;\nlet pnts = targetPath.points();\nlet inTangents = targetPath.inTangents();\nlet outTangents = targetPath.outTangents();\nconst is_front_clockwise = isClockwise(pnts);\nconst shape_transform = shape.transform;\nconst s_anchor = shape_transform.anchorPoint;\nconst s_pos = shape_transform.position;\nconst s_scale = shape_transform.scale;\nconst s_rot = shape_transform.rotation;\nconst s_skew = shape_transform.skew;\nconst s_skew_axis = shape_transform.skewAxis;\nconst shape_transform_matrix = get_transform_shape_matrix(s_anchor, s_pos, s_scale, s_rot, s_skew, s_skew_axis);\nconst layer_transform = shape_layer.transform;\nconst l_anchor = layer_transform.anchorPoint;\nconst l_pos = layer_transform.position;\nconst l_scale = layer_transform.scale;\nconst l_rot = layer_transform.rotation;\nconst layer_transform_matrix = get_transform_shape_matrix(l_anchor, l_pos, l_scale, l_rot, 0, 0);\nlet subdivs = 1;\nif (hasNoneZeroValues(inTangents) || hasNoneZeroValues(outTangents)) {\n    subdivs = 5;\n    let pointsF = [];\n    const num_pnts = pnts.length;\n    for (var i = 0; i < num_pnts; i++) {\n        var p1 = pnts[i], p2 = pnts[(i + 1) % num_pnts];\n        var out1 = outTangents[i], in2 = inTangents[(i + 1) % num_pnts];\n        var cp1 = add(p1, out1), cp2 = add(p2, in2);\n        pointsF.push(pnts[i]);\n        if (len_vec(out1) !== 0 || len_vec(in2) !== 0) {\n            var a = len_vec(out1) === 0 ? sub(p2, p1) : out1;\n            var b = len_vec(in2) === 0 ? sub(p1, p2) : in2;\n            if (!isStraightLine_w_delta(a, b, 0.98)) {\n                for (var j = 1; j < subdivs; j++) {\n                    var t = $bm_div(j, subdivs);\n                    pointsF.push(getPoint(p1, cp1, cp2, p2, t));\n                }\n            }\n        }\n    }\n    pnts = pointsF;\n}\npnts = pnts.map(p => transform2D_apply(shape_transform_matrix, p));\nconst num_pts = pnts.length;\nconst zero_center_point = getCenter(pnts);\nconst zero_center_point_3D = [\n    ...zero_center_point,\n    0\n];\nconst tr_front_mat = transformMatrix([\n    0,\n    0,\n    $bm_div($bm_neg(depth), 2)\n], scale_front, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst tr_back_mat = transformMatrix([\n    0,\n    0,\n    $bm_div(depth, 2)\n], scale_back, zero_center_point_3D, [\n    pivot_angleX,\n    pivot_angleY,\n    pivot_angleZ\n], anchor, [\n    angleX,\n    angleY,\n    angleZ\n]);\nconst z0_transformed = make_transform(tr_front_mat, [\n    0,\n    0,\n    0\n]);\nconst z1_transformed = make_transform(tr_front_mat, [\n    0,\n    0,\n    1\n]);\nconst front_facing_towards_us = isFacingTowardsUs(z0_transformed, z1_transformed);\nlet points_front_3D = pnts.map(pnt => make_transform(tr_front_mat, pnt));\nlet points_back_3D = pnts.map(pnt => make_transform(tr_back_mat, pnt));\nlet winding_sides = [];\nlet sorted_sides = [];\nlet num_sides_towards_us = 0;\nfor (var i = 0; i < num_pts; i++) {\n    if (!is_path_closed && i == num_pts - 1) {\n        break;\n    }\n    var F1 = points_front_3D[i], F2 = points_front_3D[(i + 1) % num_pts];\n    var B1 = points_back_3D[i], B2 = points_back_3D[(i + 1) % num_pts];\n    var side_normal = getNormal([\n        F2,\n        F1,\n        B1\n    ]);\n    if (!is_front_clockwise) {\n        side_normal = mul(side_normal, -1);\n    }\n    const sideIsFacingUs = isFacingTowardsUs([\n        0,\n        0,\n        0\n    ], side_normal);\n    if (sideIsFacingUs) {\n        num_sides_towards_us++;\n    }\n    winding_sides.push(sideIsFacingUs);\n    let side_sorted = [\n        F2,\n        F1,\n        B1,\n        B2\n    ];\n    side_sorted.sort((a, b) => b[2] - a[2]);\n    sorted_sides.push([\n        side_sorted,\n        i,\n        $bm_mod($bm_sum(i, 1), num_pts)\n    ]);\n}\ncompare_sides = function (side1, side2) {\n    const s1_vertices_z = side1[0].map(v => v[2]), s2_vertices_z = side2[0].map(v => v[2]);\n    for (var i = 0, il = side1[0].length; i < il; i++) {\n        if (s1_vertices_z[i] != s2_vertices_z[i]) {\n            return $bm_sub(s2_vertices_z[i], s1_vertices_z[i]);\n        }\n    }\n};\nsorted_sides.sort((a, b) => compare_sides(a, b));\nsorted_sides = sorted_sides.map(p => [\n    p[1],\n    p[2]\n]);\nsorted_sides.sort(function (a, b) {\n    const fa = winding_sides[a[0]], fb = winding_sides[b[0]];\n    if (fa && !fb) {\n        return -1;\n    } else if (!fa && fb) {\n        return 1;\n    } else {\n        return 0;\n    }\n    ;\n});\nconst vec_between_front_back = sub(points_front_3D[0], points_back_3D[0]);\nlet bb_front_2D = [], bb_back_2D = [], bb_front_transforms = [], bb_back_transforms = [];\nif (use_bb_back || use_bb_front) {\n    const bb = getBoundingBox(pnts);\n    const AB = sub(bb.right_top, bb.left_top);\n    const AD = sub(bb.left_bottom, bb.left_top);\n    const scaleX_coeff = front_facing_towards_us ? 100 : -100;\n    const scaleY_coeff = 100;\n    if (use_bb_front) {\n        const bb_front_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom\n        ].map(pnt => make_transform(tr_front_mat, pnt));\n        bb_front_2D = get2D_projection(bb_front_3D);\n        bb_front_2D.push(add(bb_front_2D[2], sub(bb_front_2D[1], bb_front_2D[0])));\n        const ex_front_left_top = bb_front_2D[0], ex_front_right_top = bb_front_2D[1], ex_front_left_bottom = bb_front_2D[2];\n        const front_bb_anchor = bb.left_top;\n        const front_bb_pos = ex_front_left_top;\n        const ex_front_AB = sub(ex_front_right_top, ex_front_left_top);\n        let front_bb_theta = angle_between_cw(AB, ex_front_AB);\n        if (!front_facing_towards_us) {\n            front_bb_theta = $bm_sub(front_bb_theta, 180);\n        }\n        const front_bb_scx = $bm_div($bm_mul(scaleX_coeff, len_vec(ex_front_AB)), len_vec(AB));\n        const ex_front_AD = sub(ex_front_left_bottom, ex_front_left_top);\n        const front_bb_th_rad = $bm_mul(front_bb_theta, $bm_div(Math.PI, 180));\n        const front_AD_rot = [\n            AD[0] * Math.cos(front_bb_th_rad) - AD[1] * Math.sin(front_bb_th_rad),\n            AD[0] * Math.sin(front_bb_th_rad) + AD[1] * Math.cos(front_bb_th_rad)\n        ];\n        let front_bb_sk = angle_between_cw(front_AD_rot, ex_front_AD);\n        front_bb_sk = front_bb_sk < 90 ? front_bb_sk : $bm_sub(front_bb_sk, 360);\n        const front_sk_rad = $bm_div($bm_mul(front_bb_sk, Math.PI), 180);\n        const front_AD_skew = [\n            AD[0] + Math.tan(-front_sk_rad) * AD[1],\n            AD[1]\n        ];\n        const front_bb_scy = $bm_div($bm_mul(scaleY_coeff, len_vec(ex_front_AD)), len_vec(front_AD_skew));\n        bb_front_transforms = [\n            front_bb_anchor,\n            front_bb_pos,\n            front_bb_theta,\n            [\n                front_bb_scx,\n                front_bb_scy\n            ],\n            front_bb_sk\n        ];\n        bb_front_2D = bb_front_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    }\n    if (use_bb_back) {\n        const bb_back_3D = [\n            bb.left_top,\n            bb.right_top,\n            bb.left_bottom\n        ].map(pnt => make_transform(tr_back_mat, pnt));\n        bb_back_2D = get2D_projection(bb_back_3D);\n        bb_back_2D.push(add(bb_back_2D[2], sub(bb_back_2D[1], bb_back_2D[0])));\n        const ex_back_left_top = bb_back_2D[0], ex_back_right_top = bb_back_2D[1], ex_back_left_bottom = bb_back_2D[2];\n        const back_bb_anchor = bb.left_top;\n        const back_bb_pos = ex_back_left_top;\n        const ex_back_AB = sub(ex_back_right_top, ex_back_left_top);\n        let back_bb_theta = $bm_sub(angle_between_cw(AB, ex_back_AB), 180);\n        if (front_facing_towards_us) {\n            back_bb_theta = $bm_sum(back_bb_theta, 180);\n        }\n        const back_bb_scx = $bm_div($bm_mul(scaleX_coeff, len_vec(ex_back_AB)), len_vec(AB));\n        const ex_back_AD = sub(ex_back_left_bottom, ex_back_left_top);\n        const back_bb_th_rad = $bm_mul(back_bb_theta, $bm_div(Math.PI, 180));\n        const back_AD_rot = [\n            AD[0] * Math.cos(back_bb_th_rad) - AD[1] * Math.sin(back_bb_th_rad),\n            AD[0] * Math.sin(back_bb_th_rad) + AD[1] * Math.cos(back_bb_th_rad)\n        ];\n        let back_bb_sk = angle_between_cw(back_AD_rot, ex_back_AD);\n        back_bb_sk = back_bb_sk < 90 ? back_bb_sk : $bm_sub(back_bb_sk, 360);\n        const back_sk_rad = $bm_div($bm_mul(back_bb_sk, Math.PI), 180);\n        const back_AD_skew = [\n            AD[0] + Math.tan(-back_sk_rad) * AD[1],\n            AD[1]\n        ];\n        const back_bb_scy = $bm_div($bm_mul(scaleY_coeff, len_vec(ex_back_AD)), len_vec(back_AD_skew));\n        bb_back_transforms = [\n            back_bb_anchor,\n            back_bb_pos,\n            back_bb_theta,\n            [\n                back_bb_scx,\n                back_bb_scy\n            ],\n            back_bb_sk\n        ];\n        bb_back_2D = bb_back_2D.map(p => transform2D_apply(layer_transform_matrix, p));\n    }\n}\nlet grad_property = null;\ntry {\n    grad_property = shape_contents('ADBE Vector Graphic - G-Fill');\n} catch (e) {\n}\n;\nvar grad_start_front_new = '';\nvar grad_end_front_new = '';\nvar grad_start_back_new = '';\nvar grad_end_back_new = '';\nif (grad_property != null) {\n    let grad_start = grad_property.startPoint.value;\n    let grad_end = grad_property.endPoint.value;\n    grad_start = transform2D_apply(shape_transform_matrix, grad_start);\n    grad_end = transform2D_apply(shape_transform_matrix, grad_end);\n    const grad_start_front = make_transform(tr_front_mat, grad_start);\n    const grad_end_front = make_transform(tr_front_mat, grad_end);\n    const grad_start_back = make_transform(tr_back_mat, grad_start);\n    const grad_end_back = make_transform(tr_back_mat, grad_end);\n    grad_start_front_new = grad_start_front;\n    grad_end_front_new = grad_end_front;\n    grad_start_back_new = grad_start_back;\n    grad_end_back_new = grad_end_back;\n    const grad_front_rot = $bm_div($bm_mul(extrudalizer('Front gradient direction').value, Math.PI), 180);\n    const grad_back_rot = $bm_div($bm_mul(extrudalizer('Back gradient direction').value, Math.PI), 180);\n    if (!arraysEqual([\n            grad_front_rot,\n            grad_back_rot\n        ], [\n            0,\n            0\n        ])) {\n        const grad_origin_front = div(add(grad_end_front, grad_start_front), 2);\n        const grad_origin_back = div(add(grad_end_back, grad_start_back), 2);\n        const grad_p_st_front = sub(grad_start_front, grad_origin_front);\n        const grad_p_end_front = sub(grad_end_front, grad_origin_front);\n        const grad_p_st_back = sub(grad_start_back, grad_origin_back);\n        const grad_p_end_back = sub(grad_end_back, grad_origin_back);\n        if (grad_front_rot != 0) {\n            const cos_st = Math.cos(grad_front_rot), sin_st = Math.sin(grad_front_rot);\n            grad_start_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_st_front[0]), $bm_mul(sin_st, grad_p_st_front[1])), grad_origin_front[0]);\n            grad_start_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_st_front[0]), $bm_mul(cos_st, grad_p_st_front[1])), grad_origin_front[1]);\n            grad_end_front_new[0] = $bm_sum($bm_sub($bm_mul(cos_st, grad_p_end_front[0]), $bm_mul(sin_st, grad_p_end_front[1])), grad_origin_front[0]);\n            grad_end_front_new[1] = $bm_sum($bm_sum($bm_mul(sin_st, grad_p_end_front[0]), $bm_mul(cos_st, grad_p_end_front[1])), grad_origin_front[1]);\n        }\n        if (grad_back_rot != 0) {\n            const cos_st_b = Math.cos(grad_back_rot), sin_st_b = Math.sin(grad_back_rot);\n            grad_start_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_st_back[0]), $bm_mul(sin_st_b, grad_p_st_back[1])), grad_origin_back[0]);\n            grad_start_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_st_back[0]), $bm_mul(cos_st_b, grad_p_st_back[1])), grad_origin_back[1]);\n            grad_end_back_new[0] = $bm_sum($bm_sub($bm_mul(cos_st_b, grad_p_end_back[0]), $bm_mul(sin_st_b, grad_p_end_back[1])), grad_origin_back[0]);\n            grad_end_back_new[1] = $bm_sum($bm_sum($bm_mul(sin_st_b, grad_p_end_back[0]), $bm_mul(cos_st_b, grad_p_end_back[1])), grad_origin_back[1]);\n        }\n    }\n}\nstringify = function (data, separator) {\n    return data.map(item => Array.isArray(item) ? item.join(',') : item.toString()).join(separator);\n};\nconst extr_data = [\n    tr_front_mat,\n    tr_back_mat,\n    shape_transform_matrix,\n    subdivs,\n    is_path_closed,\n    points_front_3D,\n    points_back_3D,\n    sorted_sides,\n    front_facing_towards_us,\n    num_sides_towards_us,\n    vec_between_front_back,\n    bb_front_2D,\n    bb_back_2D,\n    bb_front_transforms,\n    bb_back_transforms,\n    grad_start_front_new,\n    grad_end_front_new,\n    grad_start_back_new,\n    grad_end_back_new\n];\nvar txt = stringify(extr_data, ';');\n$bm_rt = txt;"},"p":{},"m":{"g":1,"a":{"a":0,"k":[0,0],"ix":2}},"a":[]},"ip":0,"op":300,"st":0,"bm":0}],"markers":[]}